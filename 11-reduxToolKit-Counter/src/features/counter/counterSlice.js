// Import createSlice, which lets us write reducers and actions together
import { createSlice } from '@reduxjs/toolkit';

// Initial state for the counter
const initialState = {
  value: 0  // We'll use this to keep track of the current counter value
};

// Create a slice of the Redux store for counter logic
const counterSlice = createSlice({
  name: 'counter',  // Name used for the slice in Redux DevTools and actions
  initialState,     // Initial state we defined above
  reducers: {
    // 'increment' action: increases counter by 1
    increment: (state) => {
      state.value += 1;
    },
    // 'decrement' action: decreases counter by 1
    decrement: (state) => {
      state.value -= 1;
    },
    // 'incrementByAmount' action: increases by a dynamic number passed in action
    incrementByAmount: (state, action) => {
      state.value += action.payload; // payload is the value passed when dispatching
    }
  }
});

// Export the action creators automatically generated by createSlice
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// Export the reducer so the store can use it
export default counterSlice.reducer;

// Explanation:
// A slice = state + actions + reducer bundled together
// Redux Toolkit allows us to write "mutating" code (e.g. state.value += 1)
// But under the hood, it's still immutable (thanks to Immer.js)
